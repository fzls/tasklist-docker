version: '2'
# TODO: change code and data into seperate container
services:
    # receive http connection from client
    web:
        image: nginx
        restart: always
        ports:
            - 80:80
        volumes:
            - .:/code
            - ./docker/nginx/site.conf:/etc/nginx/conf.d/default.conf
            - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
        depends_on:
            - lb
        networks:
            - front_tier
    # the load balancer for the php-fpm
    lb:
        image: dockercloud/haproxy
        restart: always
        ports:
            - 1936:1936
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        links:
            - php
        environment:
            - MODE=tcp
            - STATS_AUTH=meow:meow
            - STATS_PORT=1936
        networks:
            - front_tier
            - back_tier
    # the workers
    php:
        # build php based on this image, with add of laravel needed extention like php_pdo and etc.
        image: fzls/php:v1
        volumes:
            - .:/code
        working_dir: /code

        ####### change bootstrap/cache, storage's file permission @OneNote
        command: bash -c "composer install && php artisan migrate && php-fpm"
        #environment:
        #    - TCP_PORTS=9000
        #    - VIRTUAL_HOST=oauth.*.*/*
        #    - BALANCE=source
        depends_on:
            - redis
            - db
        networks:
            - back_tier
    # the redis cache service
    redis:
        image: redis
        restart: always
        # set master/slave
        networks:
            - back_tier
    # the mysql database service
    db:
        image: mysql
        volumes:
            # TODO: change mount into volumes
            - db:/var/lib/mysql
        restart: always
        # set master/slave
        environment:
            - MYSQL_DATABASE=tasklist
            - MYSQL_ROOT_PASSWORD=meow_meow_meow
            - MYSQL_USER=tasklist
            - MYSQL_PASSWORD=meow_meow_meow
        networks:
            - back_tier
networks:
    front_tier:
        driver: bridge
    back_tier:
        driver: bridge
